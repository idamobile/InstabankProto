option java_package = "com.idamobile.instabank.dto.protobuf";

option java_outer_classname = "Service";

import "Commons.proto";
import "Entities.proto";
import "Events.proto";
import "Wallets.proto";
import "Social.proto";
import "Notifications.proto";
import "Locations.proto";
import "Forms.proto";

message DiagnosticMessageProtobufDTO {
    required string info = 1;
}

//** LOGIN **

// endpoint URL: "/registerWithFacebook"
//DEPRECATED use RegisterWithPhoneRequestProtobufDTO
message RegisterWithFacebookRequestProtobufDTO {
    required string fbAccessToken = 1;
    optional string phoneNumber = 2;
    optional string verificationCode = 3;
    optional string email = 4;
}

// should be called if PIN not set
// endpoint URL: "/loginWithUserToken"
// returns LoginResponseProtobufDTO
message LoginWithUserTokenRequestProtobufDTO {
    required string userToken = 1;
}

// endpoint URL: "/registerWithPhone"
message RegisterWithPhoneRequestProtobufDTO {
    required string phoneNumber = 1;
    required string verificationCode = 2;
    required string email = 3;
    required string firstName = 4;
    required string lastName = 5;  
    required Gender gender = 6;  
}

// endpoint URL: "/getRecoveryOptions"
// returns GetRecoveryOptionsRequestProtobufDTO
message GetRecoveryOptionsRequestProtobufDTO {
    required string userToken = 1;
}

message GetRecoveryOptionsResponseProtobufDTO {
/*
    * 422 Unprocessable Entity 
            IS_NOT_REGISTERED if this user is not registered in system
            FACEBOOK_INVALID_CREDENTIALS if incorrect facebook token
            TOKENS_FROM_DIFFERENT_USERS if tokens from different users           
*/
    required bool socialConfidentEstablished = 1;
    required bool securityWordEstablished = 2;
}

// endpoint URL: "/connectFacebook"
// returns GetFacebookTokenResponseProtobufDTO if connection successful server returns long-lived token
//         HTTP 422
//            FB_CONNECTED_TO_ANOTHER_INSTA_USER if this fb connected to another user in Instabank
//            FACEBOOK_INVALID_CREDENTIALS if incorrect facebook token
message ConnectOrUpdateFacebookTokenRequestProtobufDTO {
    required string fbAccessToken = 1;
    required int64 expires = 2;
    repeated string permissions = 3;
    required bool longLivedToked = 4;
}

// endpoint URL: "/disconnectFacebook"
// returns HTTP 200
message DisconnectFacebookRequestProtobufDTO {
}

// should return long-lived token
// endpoint GET URL: "/getFacebookToken"
// returns HTTP 412 if no access token connected
message GetFacebookTokenResponseProtobufDTO {
    required string fbAccessToken = 1;
    required int64 expires = 2;
    repeated string permissions = 3;
}

// endpoint URL: "/requestUserToken"
// returns UserTokenResponseProtobufDTO
message UserTokenRequestProtobufDTO {
    required string phoneNumber = 1;
    required string verificationCode = 2;
}

// endpoint URL: "/requestUserTokenForFacebook"
// returns UserTokenResponseProtobufDTO
message UserTokenForFacebookRequestProtobufDTO {
    required string fbAccessToken = 1;
}

message UserTokenResponseProtobufDTO {
   /* 401 Unauthorized
        IS_NOT_REGISTERED
    * 422 Unprocessable Entity
        NOT_MATCHED                     if verification code is not valid
        FACEBOOK_INVALID_CREDENTIALS    if incorrect facebook token
    * 423 Locked
        TOO_MANY_VERIFICATION_ATTEMPTS  if there were too many attempts
    * 424 Failed Dependency
        VERIFICATION_CODE_NOT_REQUESTED if the verificationCode was not requested yet    
    */
    required string userToken = 1;
    required InstabankAccountDTO account = 2;
}

// endpoint URL: "/loginWithUserTokenAndPin" -> LoginWithPinAttemptsResponseProtobufDTO
message LoginWithUserTokenAndPinRequestProtobufDTO {
    required string userToken = 1;
    required int32 pin = 2;
}

// endpoint URL: "/loginWithFacebookAndPin" -> LoginResponseProtobufDTO
// endpoint URL: "/loginWithFacebookAndPinAttempts" -> LoginWithPinAttemptsResponseProtobufDTO
//DEPRECATED use LoginWithUserTokenAndPinRequestProtobufDTO
message LoginWithFacebookAndPinRequestProtobufDTO {
    required string fbAccessToken = 1;
    required int32 pin = 2;
}

// endpoint URL: "/loginWithFacebookAndPinRecoveryCode"
// returns LoginResponseProtobufDTO
//DEPRECATED, use loginWithPinRecoveryCode
message LoginWithFacebookAndPinRecoveryCodeRequestProtobufDTO {
    required string fbAccessToken = 1;
    required string pinRecoveryCode = 2;
}

// endpoint URL: "/loginWithPinRecoveryCode"
// returns LoginResponseProtobufDTO
message LoginWithPinRecoveryCodeRequestProtobufDTO {
    required string userToken = 1;
    required string pinRecoveryCode = 2;
}

message LoginResponseProtobufDTO {
    /* 412 Precondition Failed
        LOGIN_WITH_PIN_REQUIRED {RegisterWithFacebookRequestProtobufDTO}
        PIN_NOT_ESTABLISHED {LoginWithFacebookAndPinRequestProtobufDTO} if pin not established for user
        CODE_NOT_ESTABLISHED {LoginWithFacebookAndPinRecoveryCodeRequestProtobufDTO}
        PIN_NOT_BLOCKED {LoginWithFacebookAndPinRecoveryCodeRequestProtobufDTO}
    * 401 Unauthorized with protobuf entity DiagnosticMessageProtobufDTO which contains
        IS_NOT_REGISTERED {LoginWithFacebookAndPinRequestProtobufDTO, LoginWithFacebookAndPinRecoveryCodeRequestProtobufDTO} if this facebook user is not registered in system - use /registerWithFacebook
        FACEBOOK_INVALID_CREDENTIALS {RegisterWithFacebookRequestProtobufDTO, LoginWithFacebookAndPinRequestProtobufDTO, LoginWithFacebookAndPinRecoveryCodeRequestProtobufDTO} if incorrect facebook credentials
        USER_BLOCKED {RegisterWithFacebookRequestProtobufDTO} if user was banned
        PIN_CHECK_FAILED {LoginWithFacebookAndPinRequestProtobufDTO} if incorrect pin
        PIN_BANNED {LoginWithFacebookAndPinRequestProtobufDTO} if pin banned
        CODE_CHECK_FAILED {LoginWithFacebookAndPinRecoveryCodeRequestProtobufDTO} if pin recovery code check failed
        CODE_BLOCKED {LoginWithFacebookAndPinRecoveryCodeRequestProtobufDTO} if pin recovery code was blocked
        REGISTRATION_CLOSED {RegisterWithFacebookRequestProtobufDTO} if registration is not available now
    * 400 Bad Request
        PHONE_REQUIRED {RegisterWithFacebookRequestProtobufDTO} if phone number required for registration
        VERIFICATION_CODE_REQUIRED {RegisterWithFacebookRequestProtobufDTO} if verification code is required for registration
    * 424 Failed Dependency
        VERIFICATION_CODE_NOT_REQUESTED if the verificationCode was not requested yet
    * 409 Conflict
        PHONE_UNAVAILABLE               if the phoneNumber was already attached to another user
    * 422 Unprocessable Entity
        WRONG_PHONE_NUMBER_FORMAT       if the phone is not valid
        NOT_MATCHED                     if verification code is not valid
        MALFORMED_EMAIL_ADDRESS         if email address is malformed
        INVALID_FIRST_NAME              if first name is blank or whatever
        INVALID_LAST_NAME               if last name is blank or whatever
        INVALID_GENDER                  if gender is UNKNOWN
    * 423 Locked
        TOO_MANY_VERIFICATION_ATTEMPTS  if there were too many attempts
    */

    //DEPRECATED
    enum Status {
        OK = 1;
    }

    optional Status status = 1 [deprecated=true];
    optional string sessionId = 2;
    optional string userId = 3;
    required CardOrderStatus cardOrderStatus    = 4;
    optional bool newOfferContractExists        = 5;
    optional string userToken = 6;
    optional InstabankAccountDTO account = 7;
}

//** LOGIN END **


//endpoint URL: "/getRemainingPinAttempts"
message GetRemainingPinAttemptsRequestProtobufDTO {
    optional string fbAccessToken = 1 [deprecated=true];
    optional string userToken = 2;
}

message GetRemainingPinAttemptsResponseProtobufDTO {
    /* 412 Precondition Failed if pin not established for user

    * 401 Unauthorized with protobuf entity DiagnosticMessageProtobufDTO which contains
        IS_NOT_REGISTERED {LoginWithFacebookAndPinRequestProtobufDTO, LoginWithFacebookAndPinRecoveryCodeRequestProtobufDTO} if this facebook user is not registered in system - use /registerWithFacebook
        FACEBOOK_INVALID_CREDENTIALS {RegisterWithFacebookRequestProtobufDTO, LoginWithFacebookAndPinRequestProtobufDTO, LoginWithFacebookAndPinRecoveryCodeRequestProtobufDTO} if incorrect facebook credentials
    */

    required int32 attemptsCount = 1;
}

//endpoint URL: GET "/getOptionsStatusesResponse"
message GetOptionsStatusesResponseProtobufDTO {
    required bool pinEstablished = 1;
    required bool socialConfidantEstablished = 2;
    optional string socialConfidantFacebookId = 3;
    optional bool phoneNumberEstablished = 4;
    optional string phoneNumber = 5;
    optional int64 debtAmount   = 6;
    optional bool securityWordEstablished   = 7;
    optional string email = 8;
}

//endpoint URL: "/establishPin"
message EstablishPinRequestProtobufDTO {
    required int32 pin = 1;
}

message EstablishPinResponseProtobufDTO {
}

// endpoint URL: "/establishPhoneNumber"
// returns:
//      FailedDependency(424)
//         VERIFICATION_CODE_NOT_REQUESTED if the verificationCode was not requested yet
//      Conflict(409)
//         PHONE_UNAVAILABLE               if the phoneNumber was already attached to another user
//      UnprocessableEntity(422)
//         WRONG_PHONE_NUMBER_FORMAT       if the phone is not valid
//         NOT_MATCHED                     if verification code is not valid
//      Locked(423)
//         TOO_MANY_VERIFICATION_ATTEMPTS  if there were too many attempts
//      OK(200)
message EstablishPhoneNumberRequestProtobufDTO {
    required string phoneNumber = 1;
    required string verificationCode = 2;
}

//endpoint URL: "/establishSocialConfidant"
message EstablishSocialConfidantRequestProtobufDTO {
    required string facebookId = 1;
}

message EstablishSocialConfidantResponseProtobufDTO {

}

// endpoint URL: "/establishSecurityWord"
// returns:
//      UnprocessableEntity(422)
//         WRONG_WORD_FORMAT       if the word contains derecated symbols (' ','\t','\n','\r')
//         WORD_IS_TO_SHORT;%d     if the word length is lower than %d symbols 
//      OK(200)
message EstablishSecurityWordRequestProtobufDTO {
    required string securityWord = 1;
}

// endpoint URL: "/establishEmail"
// returns:
//      UnprocessableEntity(422)
//         MALFORMED_EMAIL_ADDRESS 
//      OK(200)
message EstablishEmailRequestProtobufDTO {
    required string email = 1;
}

// endpoint URL: "/sendPinRecoveryCode"
// returns: SendPinRecoveryCodeResponseProtobufDTO
//DEPRECATED use recoverWithSecurityWord
message SendPinRecoveryCodeRequestProtobufDTO {
    required string fbAccessToken = 1;
}

message SendPinRecoveryCodeResponseProtobufDTO {
    /* 412 Precondition Failed if pin not established for user
        PIN_NOT_ESTABLISHED if pin not established for user
        SOCIAL_CONFIDANT_NOT_ESTABLISHED if social confidant not established for user
        PIN_NOT_BANNED
    * 401 Unauthorized with protobuf entity DiagnosticMessageProtobufDTO which contains
        IS_NOT_REGISTERED if this facebook user is not registered in system - use /registerWithFacebook
        FACEBOOK_INVALID_CREDENTIALS if incorrect facebook credentials
    */

    enum Status {
        OK = 1;
    }

    required Status status = 1;
}

// endpoint URL: "/recoverWithSecurityWord"
// returns: HTTP 200 if recovery code sent, or:
    /* 412 Precondition Failed
        PIN_NOT_BANNED
        PIN_NOT_ESTABLISHED if pin not established for user
        SECURITY_WORD_NOT_ESTABLISHED if security word is not established for user
        SECURITY_WORD_NOT_MATCH if security word not match
        SECURITY_WORD_BLOCKED if security word blocked and user should call to bank to restore access
        SECURITY_WORD_TIMEOUT;%d to prevent frequent calls, user should repeat after %d seconds
    * 401 Unauthorized with protobuf entity DiagnosticMessageProtobufDTO which contains
        IS_NOT_REGISTERED if this facebook user is not registered in system - use 
    */
message RecoverWithSecurityWordRequestProtobufDTO {
    required string userToken = 1;
    required string securityWord = 2;
}

// Requested using GET method
// endpoint URL: "/fetchEvents"
message FetchEventsResponseProtobufDTO {
    repeated Event events = 1;
}

// Balance from Bank. Requested using GET method.
// endpoint URL: "/getBalance"
message GetBalanceResponseProtobufDTO {
    optional int64 balance = 1;
    //TODO: add error codes
}

// endpoint URL: "/openWallet"
message OpenWalletRequestProtobufDTO {
    required double latitude = 1;
    required double longitude = 2;
}

message OpenWalletResponseProtobufDTO {
}

// endpoint URL: "/getNearestOpenWallets"
message GetNearestOpenWalletsRequestProtobufDTO {
    required double latitude = 1;
    required double longitude = 2;
}

message GetNearestOpenWalletsResponseProtobufDTO {
    repeated OpenWalletProtobufDTO wallets = 1;
}

// endpoint URL: "/closeWallet"
message CloseWalletRequestProtobufDTO {
}

message CloseWalletResponseProtobufDTO {
}

//endpoint URL: "/getUserSocialNetworkIds"
message GetSocialNetworkIdsRequestProtobufDTO {
    repeated string instabankIds = 1;
}

message GetSocialNetworkIdsResponseProtobufDTO {
    repeated InstaSocialIdsMappingDTO ids = 1;
}

//endpoint URL: "/getInstabankUserIds"
message GetInstabankIdsRequestProtobufDTO {
    repeated string facebookIds = 1;
    repeated string phones = 2;
}

message GetInstabankIdsResponseProtobufDTO {
    repeated InstaSocialIdsMappingDTO ids = 1;
}

//endpoint URL: "/registerDevicePushId"
message RegisterDevicePushIdRequestProtobufDTO {
    required string devicePushId = 1;

    enum Platform {
        IOS = 0;
        ANDROID = 1;
    }

    optional Platform platform = 2 [default = IOS];
}

message RegisterDevicePushIdResponseProtobufDTO {
}

// endpoint URL: "/remindAboutOrder"
message RemindAboutOrderRequestProtobufDTO {
    required string orderId = 1;
    optional string text = 2;
}

message RemindAboutOrderResponseProtobufDTO {
    enum Status {
        OK = 0;
        ATTEMPTS_COUNT_EXCEEDED = 1;
        REMINDING_TOO_SOON = 2;
    }
    optional Status status = 1;
}

// endpoint URL: "/getAccountsStatus"
message GetAccountsStatusRequestProtobufDTO {
    repeated string instabankIds = 1;
}

message GetAccountsStatusResponseProtobufDTO {
    repeated InstabankAccountDTO accounts = 1;
}


// endpoint URL: "/getFavouriteUsers"
message GetFavouriteUsersRequestProtobufDTO {
}

message GetFavouriteUsersResponseProtobufDTO {
    repeated string userIds = 1;
}

// endpoint URL: "/addFavouriteUser"
message AddFavouriteUserRequestProtobufDTO {
    required string userId = 1;
}

message AddFavouriteUserResponseProtobufDTO {
}

// endpoint URL: "/removeFavouriteUser"
message RemoveFavouriteUserRequestProtobufDTO {
    required string userId = 1;
}

message RemoveFavouriteUserResponseProtobufDTO {
}

// endpoint URL: "/getNewNotificationsCount"
message GetNewNotificationsCountRequestProtobufDTO {
}

message GetNewNotificationsCountResponseProtobufDTO {
    required int32 count = 1;
}

// endpoint URL: "/getNotificationsTimeline"
//fromIndex = 0, toIndex = 10 - last ten notifications in DESC order
message GetNotificationsTimelineRequestProtobufDTO {
    required int32 fromIndex = 1; //from 0, include this index
    required int32 toIndex = 2; //from 0, exclude this index
    required bool updateVisitTime = 3;
}

message GetNotificationsTimelineResponseProtobufDTO {
    repeated TimelineNotification notifications = 1;
    optional int64 lastNotificationCreationTime = 2; //date of the last notification, null if user have 0 notifications at all
}

// endpoint URL: "/orderCard"
message OrderCardRequestProtobufDTO {
    required string firstname = 1;
    required string lastname = 2;

    //validation mask \d{11,12}
    required string phoneNumber = 3;

    //hh:mm:ss±hh:mm
    required string callFromTime = 4;
    required string callToTime = 5;

    optional string predefinedDesignId = 6;
    optional string imageResourceId = 7;

    optional string email = 8;
}

/**
* Return
* HTTP 422 if validation of data provided by client failed
*/
message OrderCardResponseProtobufDTO {
    required Result status = 1;

    enum Result {
        OK = 1;
        ALREADY_HAVE_A_CARD = 2;
        ALREADY_HAVE_AN_ORDER = 3;
    }
}

// endpoint URL: GET "/getCardInfo"
message GetCardInfoResponseProtobufDTO {

    enum BlockReason {
        BLOCKED_BY_BANK = 1;
        REISSUE_IN_PROGRESS = 2;
    }

    required string number = 1;
    required string holderName = 2;
    required string validThru = 3;
    optional string cvv = 4;
    required bool cardExists = 5;
    optional string predefinedDesignId = 6;
    optional string imageResourceId = 7;
    required bool blocked = 8;
    required bool virtual = 9;
    optional BlockReason blockReason = 10;
}

// endpoint URL: GET "/getBankAccountRequisites"
message GetBankAccountRequisitesProtobufResponseDTO {
    repeated FieldValueProtobufDTO fields = 1;
}

// endpoint URL: GET "/getTerminalAccountRequisites"
message GetTerminalAccountRequisitesProtobufResponseDTO {
    repeated FieldValueProtobufDTO fields = 1;
}

//
// Order Creation Section
//
// endpoint URL: "/createRequestMoney"
// returns MoneyRequestProtobufDTO
message CreateRequestMoneyRequestProtobufDTO {
    required EnvelopeProtobufDTO envelope = 1;
    required int64 amount = 2;
    repeated string participantIds = 3;
    // List of Facebook IDs of non-existent users
    repeated string invitedParticipants = 4;
    optional string fbAccessToken = 5;
}


// endpoint URL: "/createTransferMoney"
// returns TransactionProtobufDTO
message CreateTransferMoneyRequestProtobufDTO {
    required EnvelopeProtobufDTO envelope = 1;
    required int64 amount = 2;
    required string recipientId = 3;
    required bool existingUser = 4;
    optional string fbAccessToken = 5;
    optional string requestId = 6;
}

// endpoint URL: "/describeEntity"
// returns EntityContainerProtobufDTO
message DescribeEntityRequestProtobufDTO {
    required EnvelopeProtobufDTO envelope = 1;
    // moneyRequest ID or transaction ID
    required string entityId = 2;

    /* 
        Custom category ID, used only for external transactions. 
        Otherwise ignored.
    */
    optional string transactionCategoryId = 3;
}

//
// Order Modification Section
//

// endpoint URL: "/editParticipants"
// returns MoneyRequestProtobufDTO
message EditParticipantsRequestProtobufDTO {
    required string orderId = 1;
    repeated string participantIds = 2;
}

// -- Order Retieval Section --

// endpoint URL: "/smartFetchActivity"
message SmartFetchActivityRequestProtobufDTO {
    required int32 pageSize = 1;
    optional int64 firstItemTimestamp = 2;
    optional int64 lastItemTimestamp = 3;
    repeated string edgeItemIds = 4;
    optional string friendId = 5;
}

message SmartFetchActivityResponseProtobufDTO {
    repeated EntityContainerProtobufDTO updatedItems = 1;
    repeated EntityContainerProtobufDTO requestedItems = 2;
}

// endpoint URL: "/fetchSingleEntity"
// returns EntityContainerProtobufDTO
message FetchSingleEntityRequestProtobufDTO {
    required string entityId = 1;
}

// -- end of Order Retrieval Section --

// endpoint URL: "/fulfillMoneyRequest"
// returns MoneyRequestProtobufDTO
message FulfillMoneyRequestRequestProtobufDTO {
    required string orderId = 1;
    required int64 amount = 2;
    optional string message = 3;
    optional string requestId = 4;
}

// endpoint URL: "/unsubscribe"
// returns HTTP_OK or error
message UnsubscribeRequestProtobufDTO {
    required string orderId = 1;
    optional string message = 2;
}

// endpoint URL: "/removeOrder"
// returns HTTP_OK or error
message RemoveOrderRequestProtobufDTO {
    required string orderId = 1;
}

// endpoint URL: "/commentOrder"
// returns EntityContainerProtobufDTO
message CommentOrderRequestProtobufDTO {
    required string orderId = 1;
    required string message = 2;
}

// endpoint URL: "/editComment"
// returns EntityContainerProtobufDTO
message EditCommentRequestProtobufDTO {
    required string commentId = 1;
    optional string message = 2;
}

/**
  External operations with money
*/
// endpoint URL: "/withdraw"
// HTTP 422 on negative amount
message WithdrawRequestProtobufDTO {
    required int64 amount = 1;
    //payment's details
    optional string message = 2;
    /* keys:
    *  "CUSTOMER_NAME"
    *  "INN"
    *  "ACCOUNT_NUMBER"
    *  "BANK_NAME"
    *  "BIK"
    *  "CORRESPONDENT_ACCOUNT"
    *  "PAYMENT_PURPOSE"
    *  "PAYMENT_ACCOUNT" - should not be displayed on client; used as a source account for payments
    */
    repeated FieldValueProtobufDTO requisites = 3;
}

// endpoint URL "/getExternalTransferCommission"
// returns GetExternalTransferCommissionResponseProtobufDTO
// 422 on wrong requisites
message GetExternalTransferCommissionRequestProtobufDTO {
    required int64 amount = 1;
    /* keys:
    *  "CUSTOMER_NAME"
    *  "BIK"
    *  "ACCOUNT_NUMBER"
    *  TODO: consider creating separate DTO for requisites
    */
    repeated FieldValueProtobufDTO requisites = 2;
}

message GetExternalTransferCommissionResponseProtobufDTO {
    required int64 commissionAmount = 1;
}


// endpoint URL: "/inconsistentDataReport"
// returns null
message InconsistentDataReportRequestProtobufDTO {
    optional string id = 1;
    optional string dataType = 2;
    optional string info = 3;
}

// endpoint URL: "/isVersionCompatible"
message IsVersionCompatibleRequestProtobufDTO {
    required string version = 1;
}

message IsVersionCompatibleResponseProtobufDTO {
    required bool isCompatible = 1;
}

// endpoint URL: "/getLocations"
// returns: LocationsResponseProtobufDTO
// deprecated use /v2/getLocations
message LocationsRequestProtobufDTO {
    optional int64 lastUpdateTime = 1;
}

// deprecated
message LocationsResponseProtobufDTO {
    repeated LocationProtobufDTO modifiedLocations = 1;
    repeated string removedLocationIds = 2;
    repeated LocationServiceProtobufDTO modifiedServices = 3;
    repeated string removedServiceIds = 4;
    repeated LocationTypeProtobufDTO modifiedLocationTypes = 5;
    repeated string removedLocationTypeIds = 6;
    required int64 lastUpdateTime = 7;
}

/* Locations v2 */
// endpoint URL: /v2/getLocations
// returns LocationsV2ResponseProtobufDTO
message LocationsV2RequestProtobufDTO {
    optional int64 lastUpdateTime = 1;
}

message LocationsV2ResponseProtobufDTO {
    repeated LocationProtobufDTO locations = 1;
    repeated string removedIds = 2;
    repeated LocationServiceProtobufDTO services = 3;
    repeated LocationOwnerProtobufDTO owners = 4;
    required int64 lastUpdateTime = 5;
}

// endpoint URL: GET /v2/getLocationsDictionary
message LocationsV2DictionaryResponseProtobufDTO {
    repeated LocationServiceProtobufDTO services = 1;
    repeated LocationOwnerProtobufDTO owners = 2;
}

// endpoint URL: POST /v2/getLocationsViewport
message LocationsViewportRequestProtobufDTO { 
    required double centerLatitude = 1;
    required double centerLongitude = 2;
    required double latitudeSpan = 3;
    required double longitudeSpan = 4;
    required int32 zoomLevel = 5;
    repeated string serviceIds = 6;
}

message LocationsViewportResponseProtobufDTO {
    repeated LocationProtobufDTO locations = 1;
    repeated ClusterProtobufDTO clusters = 2;
}

// endpoint URL: POST /v2/getNearestLocation 
message NearestLocationRequestProtobufDTO {
    required double latitude = 1;
    required double longitude = 2;
    repeated string serviceIds = 3;
}

message NearestLocationResponseProtobufDTO {
    optional LocationProtobufDTO location = 1;
}

//endpoint URL: agreeWithOfferContract
message AgreeWithOfferContractRequestProtobufDTO {

}

//endpoint URL: "/getBeneficiaryCategories"
//return: GetBeneficiaryCategoriesResponseProtobufDTO
message GetBeneficiaryCategoriesRequestProtobufDTO {
    optional string dataHash = 1;
}

message GetBeneficiaryCategoriesResponseProtobufDTO {
    optional string dataHash = 1;
    repeated BeneficiaryCategory beneficiaryCategories = 2;
}

//endpoint URL: "/getPaymentCommission"
//return: GetPaymentCommissionResponseProtobufDTO
message GetPaymentCommissionRequestProtobufDTO {
    required FilledForm filledForm = 1;
}

message GetPaymentCommissionResponseProtobufDTO {
    required int64 amount = 1;
}

// endpoint URL: "/performBeneficiaryPayment"
// returns TransactionProtobufDTO
// 422 on wrong requisites or invalid amount
message PerformPaymentProtobufRequestDTO {
    required FilledForm filledFormDTO = 1;
    required int64 amount = 2;
    optional int64 commission = 3;
    optional string requestId = 4;
}

//endpoint URL: "/getNextPaymentForm"
//return: GetNextFormProtobufResponseDTO
// 422 on wrong requisites or invalid amount
message GetNextFormProtobufRequestDTO {
    required FilledForm filledFormDTO = 1;
}

message GetNextFormProtobufResponseDTO {
    required FilledForm filledFormDTO = 1;
    required Form formDTO = 2;
}

//endpoint URL: GET "/getTemplates"
message GetTemplatesProtobufResponseDTO {
    repeated Template templates = 1;
}

//endpoint URL: "/makeTemplate"
//return MakeTemplateResponseDTO
message MakeTemplateProtobufRequestDTO {
    required string name = 1;
    required string beneficiaryId = 2;
    required FilledForm filledForm = 3;
}

message MakeTemplateProtobufResponseDTO {
    required Template template = 1;
}


//endpoint URL: "/inviteFriends"
message InviteFriendsRequestProtobufDTO {
    required string facebookToken       = 1;
    repeated string facebookIds         = 2;
    optional string text                = 3;
}

/* Endpoints not presented in protobuf */

// endpoint URL: GET "/isSessionAlive"
// returns OK(200) or FORBIDDEN (403)

//endpoint URL: "/searchActivities"
message SearchActivitiesRequestProtobufDTO {
    optional string query = 1;
}

message SearchActivitiesResponseProtobufDTO {
    repeated EntityContainerProtobufDTO items = 2;
}

//endpoint URL: "/getTransactionDescription"
// returns OK(200) or FORBIDDEN(403) in case of transaction not owned by user
message GetTransactionDescriptionRequestProtobufDTO {
    required string transactionId = 1;
}

message GetTransactionDescriptionResponseProtobufDTO {
    required Form form = 1;
    required FilledForm filledForm = 2;
    required string beneficiaryId = 3;
}


//endpoint URL: "/getStandardForms"
message GetStandardFormsRequestProtobufDTO {
    optional int32 dataHash = 1;
}

//empty response if there is no changes
//filled dataHash & standardForms otherwise
message GetStandardFormsResponseProtobufDTO {
    optional int32 dataHash = 1;
    optional BeneficiaryCategory standardForms = 2;
}

//endpoint URL: "/blockCard"
message BlockCardRequestProtobufDTO {
    //todo add block reason
}

//endpoint URL: "/reIssueCard"
//returns:
//    NO_CONTENT(204)
//    PreconditionFailed(412) if not enouth balance for commission or reissue in progress
//    TooManyRequests(429)
message ReIssueCardRequestProtobufDTO {
    // fast reissue. More expensive
    // not used for virtual cards
    optional bool express = 1;
}

//endpoint URL: "/reIssueCardInfo"
// inqures commission fee & last reissue date & status of current reissuing process
message ReIssueCardInfoRequestProtobufDTO {
    required bool express = 1;
}

// or 412 PreconditionFailed - invalid account type: plastic card required
message ReIssueCardInfoResponseProtobufDTO {
    enum Status {
        ORDER_SENT = 0;
        SENDING_FAILED = 1;
        COMPLETED = 2;
    }
    required int64 reissueFee = 1;
    optional int64 lastReissueDate = 2;
    optional Status lastReissueStatus = 3;
}

//endpoint URL: "/requestPhoneVerification"
//returns OK(200) or
//        UnprocessableEntity(422) if the phone is not valid or
//        Conflict(409)            if the phone was already attached to another user or (checked only if one of the tokens presents)
//        Unauthorized(401)        if the fbAccessToken or userToken is not valid
//        TooManyRequests(429)     if the verification was requested too many times
message VerificationCodeRequestProtobufDTO {
    required string phoneNumber = 1; //only digits
    optional string fbAccessToken = 2 [deprecated=true];
}

//endpoint URL: "/getTransactionCategories"
message GetTransactionCategoriesRequestProtobufDTO {
    optional string dataHash = 1;
}

message GetTransactionCategoriesResponseProtobufDTO {
    repeated TransactionCategory categories = 1;
    optional string dataHash = 2;
}

// Card Limits 

//endpoint URL: GET "/getVirtualCardLimit"
message GetVirtualCardLimitResponseProtobufDTO {
    required LimitPairDTO limit     = 1;

    /*
    HTTP Error Codes:
    412 Precondition Failed - user doesn't have a virtual card
    500 Internal Server error - if limit was negative or not set bacause of Pasha - mudak
    */

}

//endpoint URL: "/setPlasticCardLimits"
// returns HTTP codes:
// 204 - OK
// 412 - user doesn't have plastic
// 422 - invalid limit amount
message SetPlasticCardLimitsRequestProtobufDTO {
    optional int64 withdrawalDailyLimit = 1;
    optional int64 withdrawalMonthlyLimit = 2;

    optional int64 spendingDailyLimit = 3;
    optional int64 spendingMonthlyLimit = 4;

    optional bool lockOperations = 5;
}

//endpoint URL: "/getPlasticCardLimits"
// returns HTTP codes:
// 412 - user doesn't have plastic
message GetPlasticCardLimitsResponseProtobufDTO {

    required LimitPairDTO withdrawalDailyLimit = 1;
    required LimitPairDTO withdrawalMonthlyLimit = 2;

    required LimitPairDTO spendingDailyLimit = 3;
    required LimitPairDTO spendingMonthlyLimit = 4;

    required bool lockOperations = 5;
}

//endpoint URL: GET "/getRefillTrackerStatus"
message GetRefillTrackerStatusResponseProtobufDTO {
    required int32 currentMonth = 1;
    required int32 currentYear = 2;

    /*
     * In case of VC contains number of overall transfers.
     * In case of Plastic contains number of transfers during current month.
     */
    required int32 completedTransfersCount = 3;

    /*
     * Number of free transfers left
     */
    required int32 remainingFreeTransfersCount = 4;

    /*
     * Count of free transfers according to conditions
     */    
    required int32 maxFreeTransfersCount = 5;
}

//endpoint URL: GET "/getRefillCommission"
message GetRefillCommissionRequestProtobufDTO {
    required int64 amount = 1;
}

message GetRefillCommissionResponseProtobufDTO {
    required int64 commissionAmount = 1;
}

//endpoint URL: GET "/getC2CTextResources"
// Accept-Language header param should be set
message GetC2CTextResourcesProtobufResponseDTO {
    optional string limitsText = 1;
}

//endpoint URL: GET "/getC2CLimits"
// Accept-Language header param should be set
message GetC2CLimitsProtobufResponseDTO {
    required int64 allowedAmount = 1;
    repeated string possibleErrorMessages = 2;
}

//endpoint URL: POST "/getTextResource"
//returns GetTextResourceResponseProtobufDTO
message GetTextResourceRequestProtobufDTO {
    repeated string resourceId = 1;
}

message GetTextResourceResponseProtobufDTO {
    repeated FieldValueProtobufDTO resources = 1;
}

//endpoint URL: POST "/updateAccountDetails"
//returns UpdateAccountDetailsResponseProtobufDTO
message UpdateAccountDetailsRequestProtobufDTO {
    required Gender gender = 1;
    required string firstName = 2;
    required string lastName = 3;
    optional string userImageResourceId = 4;
    optional string coverImageResourceId = 5;
}

message UpdateAccountDetailsResponseProtobufDTO {
    required InstabankAccountDTO account = 1;
}
